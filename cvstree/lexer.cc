/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/cvsgui/cvsgui/cvstree/lexer.cc,v 1.26 2004/12/16 00:49:41 bruenen Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
static yyconst short int yy_accept[536] =
    {   0,
        1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   32,   32,   31,   31,    0,    0,
        0,    0,   55,   53,    1,    1,   53,   29,   51,   52,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   39,   28,   53,   42,
       53,   44,   44,   42,   45,   45,   45,   41,   41,   41,
       53,   46,   36,   38,   37,   36,   36,   53,   49,   50,
       48,   33,   32,   32,   53,   31,   27,   30,    1,    1,
        1,    1,    0,   29,   51,   52,   52,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       39,   28,   42,    0,    0,   43,   51,    0,    0,   46,
       36,   36,   36,   48,   33,   32,    0,   32,   31,   27,
       30,    0,   47,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,    0,    0,   36,   36,   14,
        0,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,    0,   40,   36,   36,    0,   29,   29,   29,

       29,   29,   15,   29,   29,    4,   29,   21,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,    0,
       36,   36,    0,   29,   29,   29,   29,   29,   29,   29,
       29,   20,   29,    6,   29,   29,   17,   19,   29,    0,
       29,   29,    0,   36,   36,    0,   29,    0,   16,    5,
       29,   29,   29,   29,   29,    0,   29,   29,   29,    0,
       29,   29,    0,   36,   36,    0,    0,    0,   29,   29,
       29,   29,    0,    0,   29,   29,   29,    0,   29,   29,
       13,   36,   36,    2,    0,    0,   18,   22,   29,   24,
        0,    0,   29,    0,    0,    0,   29,   29,   36,   36,

        0,    0,   29,    0,   25,   29,    0,    0,    0,   29,
       29,   36,   36,    0,    0,   29,    0,   23,    0,    0,
        0,   29,   29,   36,   36,    0,    7,   12,    0,    0,
        0,    0,   29,   29,   36,   36,    3,    0,    0,    0,
        0,   29,   29,   36,   36,    0,    0,    0,    0,   29,
       29,   36,   36,    0,    0,    8,    0,   29,   29,   36,
       36,    0,    0,   10,   29,   29,   36,   36,    0,    0,
       29,   29,   36,   36,    0,    0,   29,   29,   36,   36,
        0,   11,   29,   29,   36,   36,    0,   29,   29,   36,
       36,    9,   29,   29,   36,   36,   29,   29,   36,   36,

       29,   29,   36,   36,   29,   29,   36,   36,   29,   29,
       36,   36,   29,   29,   36,   36,   29,   29,   36,   36,
       29,   29,   36,   36,    0,    0,   29,   36,    0,   29,
       36,    0,   29,   36,    0,   29,   36,    0,   29,   36,
        0,   29,   36,    0,   29,   36,    0,   29,   36,   34,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,

       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   29,   36,   29,   36,   29,   36,   29,   36,
       29,   36,   26,   35,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    6,    1,    7,    8,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   12,    1,
       13,    1,    1,    1,   14,   15,   16,   17,   14,   14,
       14,   14,   18,   14,   14,   19,   14,   14,   14,   14,
       14,   20,   21,   22,   14,   14,   23,   14,   14,   14,
        1,    1,    1,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   14,   34,   35,   36,   37,
       38,   39,   14,   40,   41,   42,   43,   44,   45,   14,
       46,   19,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    1,    1,    5,
        6,    6,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1
    } ;

static yyconst short int yy_base[556] =
    {   0,
        0,    4,   26,    3,    9,   15,   73,   77,   88,  127,
       97,  106,  115,  136,  143,  147,  156,  166,  122,  175,
      187,  197,  207,  211,  222,    0,  269,  317,  227,  231,
      181,  242,  882,  883,  248,  281,  857,    0,  285,   19,
       77,  864,  841,   78,  838,  839,  192,  843,  846,   68,
      221,  845,  250,  835,  865,  858,    0,    0,  860,  859,
      839,  883,  857,  856,  883,  295,  295,  883,  304,  146,
      855,  854,    0,  308,  329,  856,  849,  851,  883,  883,
      850,    0,  308,  313,  811,    0,    0,    0,  334,  351,
      356,  364,  840,    0,  368,  372,  376,  847,  251,  835,

      815,  827,  811,  827,  815,  808,  808,  813,  822,  800,
      806,  807,  816,  802,  806,  180,  804,  797,  831,  824,
        0,    0,  826,  791,  824,  823,  380,  378,  822,  821,
        0,  823,  816,  818,    0,  360,  779,  372,    0,    0,
        0,  809,  883,  820,  790,  794,  790,  784,  784,  790,
      791,  788,  788,  770,  772,  784,  778,  780,  781,  767,
      775,  781,  781,  798,  791,  770,  393,  795,  788,  883,
      770,  766,  757,  759,  769,  762,  783,  753,  755,  780,
      752,  778,  747,  114,  758,  759,  756,  757,  745,  747,
      774,  767,  738,  883,  771,  764,  743,  738,  733,  733,

      740,  729,  883,  737,  744,  883,  728,  883,  756,  738,
      754,  725,  721,  751,  719,  725,  754,  751,  744,  723,
      748,  741,  718,  721,  746,  739,   85,  716,  709,  711,
      718,  883,  740,  883,  706,  714,  883,    0,  709,  701,
      733,  726,  700,  730,  723,  706,  729,  698,  883,  883,
      691,  703,  688,  700,  723,  701,  693,  697,  697,  694,
      715,  708,  683,  712,  705,  706,  686,  682,  703,  702,
      679,  700,  669,  663,  671,  702,  701,  661,  697,  690,
      883,  695,  688,  883,  667,  658,  883,  883,  660,  883,
      654,  685,  653,  654,  656,  659,  684,  677,  682,  675,

      652,  644,  648,  658,  883,  672,  653,  656,  639,  672,
      665,  670,  663,  646,  663,  662,  631,  883,  627,  634,
      636,  661,  654,  659,  652,  653,  883,  883,  621,  629,
      632,  622,  652,  645,  650,  643,  883,  622,  613,  612,
      615,  644,  637,  642,  635,  605,  613,  634,  603,  636,
      629,  634,  627,  596,  600,  883,  626,  629,  622,  627,
      620,  590,  594,  883,  623,  616,  621,  614,  593,  584,
      617,  610,  615,  608,  582,  608,  611,  604,  609,  602,
      577,  883,  606,  599,  604,  597,  598,  601,  594,  599,
      592,  883,  597,  590,  595,  588,  593,  586,  591,  584,

      589,  582,  587,  580,  585,  578,  583,  576,  581,  574,
      579,  572,  577,  570,  575,  568,  573,  566,  571,  564,
      132,  563,  161,  562,  534,  570,  559,  558,  541,  556,
      555,  523,  553,  552,  531,  550,  549,  520,  547,  546,
      525,  544,  543,  517,  541,  540,  515,  538,  537,  883,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  510,  509,  504,  494,  493,  488,  487,
      484,  483,  482,  477,  476,  473,  472,  471,  402,  401,
      400,  399,  398,  396,  395,  389,  387,  384,  383,  380,

      379,  376,  362,  350,  349,  337,  336,  332,  331,  302,
      291,  290,  282,  281,  278,  255,  254,  249,  245,  242,
      227,  215,  182,  174,  168,  162,  161,  129,  109,  102,
       83,   22,  883,  883,  883,  416,  422,  428,  434,  440,
      446,  452,  458,  464,  470,  476,  482,  487,  493,  498,
      504,  509,   10,  515,  520
    } ;

static yyconst short int yy_def[556] =
    {   0,
      536,  536,  535,    3,  537,  537,  538,  538,  536,  536,
      539,  539,  540,  540,  541,  541,  536,  536,  542,  542,
      536,  536,  543,  543,  536,   25,  544,  544,  545,  545,
      546,  546,  535,  535,  535,  535,  535,  547,  535,  535,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  548,  549,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  550,  535,  535,  550,  550,  535,  535,  535,
      535,  551,  535,  535,  552,  553,  554,  555,  535,  535,
      535,  535,  535,  547,  535,  535,  535,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      548,  549,  535,  535,  535,  535,  535,  535,  535,  535,
      550,  550,  550,  535,  551,  535,  552,  535,  553,  554,
      555,  535,  535,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  535,  535,  550,  550,  535,
      535,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  535,  535,  550,  550,  535,  547,  547,  547,

      547,  547,  535,  547,  547,  535,  547,  535,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  535,
      550,  550,  535,  547,  547,  547,  547,  547,  547,  547,
      547,  535,  547,  535,  547,  547,  535,  547,  547,  535,
      547,  547,  535,  550,  550,  535,  547,  535,  535,  535,
      547,  547,  547,  547,  547,  535,  547,  547,  547,  535,
      547,  547,  535,  550,  550,  535,  535,  535,  547,  547,
      547,  547,  535,  535,  547,  547,  547,  535,  547,  547,
      535,  550,  550,  535,  535,  535,  535,  535,  547,  535,
      535,  535,  547,  535,  535,  535,  547,  547,  550,  550,

      535,  535,  547,  535,  535,  547,  535,  535,  535,  547,
      547,  550,  550,  535,  535,  547,  535,  535,  535,  535,
      535,  547,  547,  550,  550,  535,  535,  535,  535,  535,
      535,  535,  547,  547,  550,  550,  535,  535,  535,  535,
      535,  547,  547,  550,  550,  535,  535,  535,  535,  547,
      547,  550,  550,  535,  535,  535,  535,  547,  547,  550,
      550,  535,  535,  535,  547,  547,  550,  550,  535,  535,
      547,  547,  550,  550,  535,  535,  547,  547,  550,  550,
      535,  535,  547,  547,  550,  550,  535,  547,  547,  550,
      550,  535,  547,  547,  550,  550,  547,  547,  550,  550,

      547,  547,  550,  550,  547,  547,  550,  550,  547,  547,
      550,  550,  547,  547,  550,  550,  547,  547,  550,  550,
      547,  547,  550,  550,  535,  535,  547,  550,  535,  547,
      550,  535,  547,  550,  535,  547,  550,  535,  547,  550,
      535,  547,  550,  535,  547,  550,  535,  547,  550,  535,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,

      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  547,  550,  547,  550,  547,  550,  547,  550,
      547,  550,  535,  535,    0,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535
    } ;

static yyconst short int yy_nxt[932] =
    {   0,
      535,   35,   36,   35,   35,   35,   36,   35,   35,   55,
       39,   40,   39,   39,  139,   56,   39,   40,   39,   39,
       97,   37,   97,   97,  534,   37,   38,   39,   40,   39,
       39,   41,   38,   38,   38,   38,   34,   34,   38,   38,
       38,   38,   38,   38,   38,   42,   38,   38,   43,   38,
       44,   45,   46,   47,   38,   48,   38,   49,   38,   50,
       51,   52,   38,   38,   38,   38,   53,   54,   38,   38,
       38,   38,   38,   38,   39,   40,   39,   39,   39,   40,
       39,   39,   98,   34,   34,  533,   99,   34,   34,   39,
       40,   39,   39,   59,   59,  250,  110,   60,   39,   40,

       39,   39,   63,   63,  102,  111,   64,   39,   40,   39,
       39,   63,   63,  251,  532,   64,   66,   40,   66,   66,
      103,  531,   67,   74,   75,   74,   74,   61,   39,   40,
       39,   39,   59,   59,  425,  426,   60,   66,   40,   66,
       66,  530,  210,   67,   69,   40,   69,   69,   69,   40,
       69,   69,   70,  129,  211,  128,   70,   39,   40,   39,
       39,   71,   71,  425,  426,   72,   61,   39,   40,   39,
       39,   71,   71,  529,  528,   72,   74,   75,   74,   74,
      527,   76,   39,   40,   39,   39,  526,   77,   39,   40,
       39,   39,   78,   79,  525,   80,   81,   80,   39,   40,

       39,   39,   78,   79,  160,   80,   81,   80,   39,   40,
       39,   39,   39,   40,   39,   39,  106,   34,   34,  161,
      107,   34,   34,   39,   40,   39,   39,  524,   39,   40,
       39,   39,   39,   40,   39,   39,   83,   34,   34,  523,
       84,   34,   34,   39,   40,   39,   39,   83,   84,   89,
       90,   89,   89,  112,  522,   84,   84,  521,  113,   84,
       99,  520,  143,   83,   83,   84,  519,  518,   85,   34,
       39,   40,   39,   39,   34,   34,   34,   34,  115,   34,
       34,   34,   91,   92,   91,   91,   95,   96,   95,   95,
      517,  116,   34,  516,  515,  117,   95,   96,   95,   95,

      125,  125,  514,  513,  126,  127,   96,  127,  127,   95,
       96,   95,   95,  128,  512,   34,   34,   34,   39,   40,
       39,   39,   34,   34,   34,   34,  136,   34,   34,   34,
       97,  136,   97,   97,  136,   89,   90,   89,   89,  136,
       34,  136,  136,  511,  510,  136,  136,  136,  509,  508,
      136,  136,   91,   92,   91,   91,  136,   91,   92,   91,
       91,  507,  506,   34,   34,   92,   92,   92,   92,   95,
       96,   95,   95,   97,  505,   97,   97,   97,  136,   97,
       97,  127,   96,  127,  127,  129,  136,  128,  504,  128,
      136,  503,  502,  136,  136,  501,  500,  136,  136,  499,

      129,  498,  167,  136,  194,  136,  136,  497,  496,  136,
      495,  494,  493,  492,  491,  136,   34,   34,   34,   34,
       34,   34,   57,   57,   57,   57,   57,   57,   58,   58,
       58,   58,   58,   58,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   68,   68,   68,   68,
       68,   68,   73,   73,   73,   73,   73,   73,   82,   82,
       82,   82,   82,   82,   86,   86,   86,   86,   86,   86,
       87,   87,   87,   87,   87,   87,   88,   88,   88,   88,
       88,   88,   94,  490,  489,  488,   94,  121,  487,  486,
      121,  121,  121,  122,  485,  484,  483,  122,  131,  482,

      481,  131,  131,  131,  135,  480,  479,  135,  135,  137,
      137,  137,  137,  137,  137,  140,  478,  140,  140,  140,
      141,  477,  476,  141,  141,  141,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  425,  429,  428,  427,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,

      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,

      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,

      196,  195,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  138,  134,  169,  168,
      130,  167,  126,  126,  166,  123,  165,  164,  163,  162,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  147,  146,  145,  144,   99,  142,  138,  134,
      134,  133,  132,  130,  130,  123,  123,  124,  123,  123,
      120,  119,  118,  114,  109,  108,  105,  104,  101,  100,
       93,  535,   33,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535
    } ;

static yyconst short int yy_chk[932] =
    {   0,
        0,    1,    1,    1,    1,    2,    2,    2,    2,    4,
        5,    5,    5,    5,  553,    4,    6,    6,    6,    6,
       40,    1,   40,   40,  532,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    7,    7,    8,    8,
        8,    8,   41,    7,    7,  531,   41,    8,    8,    9,
        9,    9,    9,    9,    9,  227,   50,    9,   11,   11,

       11,   11,   11,   11,   44,   50,   11,   12,   12,   12,
       12,   12,   12,  227,  530,   12,   13,   13,   13,   13,
       44,  529,   13,   19,   19,   19,   19,    9,   10,   10,
       10,   10,   10,   10,  421,  421,   10,   14,   14,   14,
       14,  528,  184,   14,   15,   15,   15,   15,   16,   16,
       16,   16,   15,   70,  184,   70,   16,   17,   17,   17,
       17,   17,   17,  423,  423,   17,   10,   18,   18,   18,
       18,   18,   18,  527,  526,   18,   20,   20,   20,   20,
      525,   20,   31,   31,   31,   31,  524,   20,   21,   21,
       21,   21,   21,   21,  523,   21,   21,   21,   22,   22,

       22,   22,   22,   22,  116,   22,   22,   22,   23,   23,
       23,   23,   24,   24,   24,   24,   47,   23,   23,  116,
       47,   24,   24,   25,   25,   25,   25,  522,   29,   29,
       29,   29,   30,   30,   30,   30,   25,   29,   29,  521,
       25,   30,   30,   32,   32,   32,   32,   25,   25,   35,
       35,   35,   35,   51,  520,   25,   25,  519,   51,   25,
       99,  518,   99,   25,   25,   25,  517,  516,   25,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   53,   27,
       27,   27,   36,   36,   36,   36,   39,   39,   39,   39,
      515,   53,   27,  514,  513,   53,   66,   66,   66,   66,

       67,   67,  512,  511,   67,   69,   69,   69,   69,   74,
       74,   74,   74,   69,  510,   27,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   83,   28,   28,   28,
       75,   84,   75,   75,   83,   89,   89,   89,   89,   84,
       28,   83,   83,  509,  508,   83,   84,   84,  507,  506,
       84,   83,   90,   90,   90,   90,   84,   91,   91,   91,
       91,  505,  504,   28,   28,   92,   92,   92,   92,   95,
       95,   95,   95,   96,  503,   96,   96,   97,  136,   97,
       97,  127,  127,  127,  127,  128,  136,  128,  502,  127,
      138,  501,  500,  136,  136,  499,  498,  136,  138,  497,

      167,  496,  167,  136,  167,  138,  138,  495,  494,  138,
      493,  492,  491,  490,  489,  138,  536,  536,  536,  536,
      536,  536,  537,  537,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  538,  539,  539,  539,  539,  539,  539,
      540,  540,  540,  540,  540,  540,  541,  541,  541,  541,
      541,  541,  542,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  543,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  546,  547,  488,  487,  486,  547,  548,  485,  484,
      548,  548,  548,  549,  483,  482,  481,  549,  550,  480,

      479,  550,  550,  550,  551,  478,  477,  551,  551,  552,
      552,  552,  552,  552,  552,  554,  476,  554,  554,  554,
      555,  475,  474,  555,  555,  555,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  422,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,

      396,  395,  394,  393,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      363,  362,  361,  360,  359,  358,  357,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  336,  335,  334,  333,  332,
      331,  330,  329,  326,  325,  324,  323,  322,  321,  320,
      319,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  289,  286,  285,

      283,  282,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  239,  236,  235,  233,  231,  230,  229,  228,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  207,  205,  204,
      202,  201,  200,  199,  198,  197,  196,  195,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,

      169,  168,  166,  165,  164,  163,  162,  161,  160,  159,
      158,  157,  156,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  142,  137,  134,  133,  132,
      130,  129,  126,  125,  124,  123,  120,  119,  118,  117,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   98,   93,   85,   81,
       78,   77,   76,   72,   71,   64,   63,   61,   60,   59,
       56,   55,   54,   52,   49,   48,   46,   45,   43,   42,
       37,   33,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[54] =
    {   0,
      121,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  149,  151,  152,  153,  154,
      155,  157,  159,  160,  161,  162,  163,  164,  166,  168,
      169,  170,  171,  172,  173,  175,  180,  181,  182,  183,
      186,  190,  204
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.ll"
#define INITIAL 0
#line 2 "lexer.ll"
/*
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 1, or (at your option)
** any later version.

** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.

** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include <string.h>
#include "common.h"
#include "parser.h"

// Current line number
int currentLineNumber = 1;

// token expected by the parser
kTokens expectToken = kNone;

CRevNumber revnumber;

extern "C" int yywrap();
extern "C" int yywrap() { BEGIN INITIAL; return 1; }
int  readNumber( int offset );
void reset( void );
void incLineNumber( void );
static void parse_revision_number__(const char* text, size_t len);
/* Normal state:  parsing nodes.  The initial start state is used */
/* only to recognize the VRML header. */
#define NODE 1

/* Start tokens for all of the field types, */
/* except for MFNode and SFNode, which are almost completely handled */
/* by the parser: */
#define ST_STRING 2
#define ST_TAG 3
#define ST_REV 4
#define ST_REVORNIL 5
#define ST_INREV 6
#define ST_REVLISTS 7
#define ST_INT 8

#define ST_ANYBUTSEP 9
#define ST_DATE 10
#define ST_AUTHOR_VALUE 11
#define ST_KEYWORD 12
#define ST_ID 13
#define ST_STATE 14
#define ST_FILENAME 15

/* integer */
/* positive integer */
/* Whitespace. */
/* And the same pattern without the newline */
/* a keyword string */
/* an id */
/* a string */
/* a tag string */
/* a state string */
/* a author string */
/* a filename string */
/*revfollow (----------------------------)*/
/*endfollow (=============================================================================)*/
/*Should we contain newline?*/
#line 841 "lexer.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 90 "lexer.ll"



	/* Switch into a new start state if the parser */
	/* just told us that we've read a field name */
	/* and should expect a field value (or IS) */
#if qCvsDebug
	if (yy_flex_debug)
		fprintf(stderr,"LEX--> Start State %d\n", expectToken);
#endif
	switch(expectToken)
	{
	case kNone: BEGIN NODE; break;
	case kString: BEGIN ST_STRING; break;
	case kRevnum: BEGIN ST_REV; break;
	case kRevnumOrNil: BEGIN ST_REVORNIL; break;
	case kID: BEGIN ST_ID; break;
	case kFilename: BEGIN ST_FILENAME; break;
	case kInt: BEGIN ST_INT; break;
	case kDate: BEGIN ST_DATE; break;
	case kRev: BEGIN ST_REV; break;
	case kKeyword: BEGIN ST_KEYWORD; break;
	case kAuthorValue: BEGIN ST_AUTHOR_VALUE; break;
	case kAnyButSep: BEGIN ST_ANYBUTSEP; break;
	case kState: BEGIN ST_STATE; break;
	case kTag: BEGIN ST_TAG; break;
	case kRevList: BEGIN ST_REVLISTS; break;
	default: yyerror("ACK: Bad expectToken"); break;
	}


#line 1038 "lexer.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 536 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 883 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 54 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 54 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 55 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 121 "lexer.ll"
{ BEGIN NODE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "lexer.ll"
{ return ID_RCS; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "lexer.ll"
{ return ID_WORKING; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "lexer.ll"
{ return ID_HEAD; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "lexer.ll"
{ return ID_BRANCH; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "lexer.ll"
{ return ID_LOCKS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 128 "lexer.ll"
{ return ID_ACCESS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "lexer.ll"
{ return ID_SYMBOLIC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "lexer.ll"
{ return ID_KEYWORD; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "lexer.ll"
{ return ID_TOTREVISIONS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 132 "lexer.ll"
{ return ID_SELREVISIONS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 133 "lexer.ll"
{ return ID_DESCRIPTION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 134 "lexer.ll"
{ return ID_REVISION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 136 "lexer.ll"

	YY_BREAK
case 15:
YY_RULE_SETUP
#line 137 "lexer.ll"
{ return ID_DATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lexer.ll"
{ return ID_AUTHOR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "lexer.ll"
{ return ID_STATE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "lexer.ll"
{ return ID_BRANCHES; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "lexer.ll"
{ return ID_STRICT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lexer.ll"
{ return ID_LINES; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "lexer.ll"
{ return ID_KOPT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "lexer.ll"
{ return ID_COMMITID; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "lexer.ll"
{ return ID_MERGEPOINT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "lexer.ll"
{ return ID_FILENAME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "lexer.ll"
{ return ID_LOCKEDBY; }
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "lexer.ll"
{ return ID_ENDFOLLOW; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 151 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 152 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 153 "lexer.ll"
{ yylval_set(yytext); return TAG; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 154 "lexer.ll"
{ yytext[yyleng-1] = '\0'; yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 157 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 160 "lexer.ll"
{         yyless(28); reset(); return ID_REVFOLLOW; }
	YY_BREAK
case 35:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "lexer.ll"
{                     reset(); return ID_ENDFOLLOW; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 162 "lexer.ll"
{ yylval_set(yytext); return STRING; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 163 "lexer.ll"
{ incLineNumber(); yylval_set((int)(unsigned char)yytext[0]); return ID_CHAR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "lexer.ll"
{ yylval_set((int)(unsigned char)yytext[0]); return ID_CHAR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 166 "lexer.ll"
{ yylval_set(yytext); reset(); return STRING; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 168 "lexer.ll"
{ parse_revision_number__(yytext, yyleng - 1); return REVNUMLISTITEM; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "lexer.ll"
{ yyless(0); reset(); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 170 "lexer.ll"
{ revnumber.reset(); readNumber(0); BEGIN ST_INREV; expectToken = kNone;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 171 "lexer.ll"
{                    readNumber(1); BEGIN ST_INREV; expectToken = kNone;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 172 "lexer.ll"
{ yyless(0); /* put back the spaces */	reset();                        return REVNUM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 173 "lexer.ll"
{ yyless(0); /* put back the spaces */	reset(); yylval_set(revnumber);	return REVNUM; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 175 "lexer.ll"
{ int v=readNumber(0); reset(); yylval_set(v); return INTEGER; }
	YY_BREAK
/*
	 *settings for date strings
	 */
case 47:
YY_RULE_SETUP
#line 180 "lexer.ll"
{ return ';'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 181 "lexer.ll"
{ int v=readNumber(0);          yylval_set(v); return INTEGER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "lexer.ll"
{ return '/'; } // change '-' in dates to '/'
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 183 "lexer.ll"
{ return yytext[0]; }
	YY_BREAK
/* Whitespace and catch-all rules apply to all start states: */
case 51:
YY_RULE_SETUP
#line 186 "lexer.ll"
;
	YY_BREAK
/* This is also whitespace, but we'll keep track of line number */
/* to report in errors: */
case 52:
YY_RULE_SETUP
#line 190 "lexer.ll"
{
								  incLineNumber();
	
								  if(expectToken == kAnyButSep)
								  {
									// strange bug, flex is sometimes getting here in
									// a kAnyButSep mode, while it should not
									yylval_set(yytext);
									return STRING;
								  }
								}
	YY_BREAK
/* This catch-all rule catches anything not covered by any of */
/* the above: */
case 53:
YY_RULE_SETUP
#line 204 "lexer.ll"
{ yylval_set((int)(unsigned char)yytext[0]); return (int)(unsigned char)yytext[0]; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 206 "lexer.ll"
ECHO;
	YY_BREAK
#line 1431 "lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NODE):
case YY_STATE_EOF(ST_STRING):
case YY_STATE_EOF(ST_TAG):
case YY_STATE_EOF(ST_REV):
case YY_STATE_EOF(ST_REVORNIL):
case YY_STATE_EOF(ST_INREV):
case YY_STATE_EOF(ST_REVLISTS):
case YY_STATE_EOF(ST_INT):
case YY_STATE_EOF(ST_ANYBUTSEP):
case YY_STATE_EOF(ST_DATE):
case YY_STATE_EOF(ST_AUTHOR_VALUE):
case YY_STATE_EOF(ST_KEYWORD):
case YY_STATE_EOF(ST_ID):
case YY_STATE_EOF(ST_STATE):
case YY_STATE_EOF(ST_FILENAME):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 536 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 536 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 535);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 206 "lexer.ll"


/* offset needed by '<ST_INREV>\.{int}' to ignore leading '.' */
int readNumber(int offset)
{
	int v;
	if(sscanf(yytext + offset, "%d", &v) == 1)
		revnumber += v;
	else
		yyerror("%s not an integer value", yytext);
		
	return v;
}

#include <algorithm>
#include <cctype>
static std::pair<int, const char*> atoi__(const char* first__, const char* last__)
{
	while (isspace(*first__)) {
		first__++;
	}
	int c = *first__++;
	int total = 0;
	for (; isdigit(c); c = *first__++) {
		total = 10 * total + (c - '0');
		if (first__ == last__) {
			break;
		}
	}
	return std::make_pair(total, first__);
}

static void parse_revision_number__(const char* text, size_t len)
{
	const char* first = text;
	const char* const end = first + len;
	const char* last = end;
	CRevNumber revnumber_tmp;
	while (first < end)
	{
		std::pair<int, const char*> v = atoi__(first, last = std::find(first, end, '.'));
		revnumber_tmp += v.first;
		first = ++last;
	}
	yylval_set(revnumber_tmp);
}

void reset()
{
	BEGIN NODE; 
	expectToken = kNone;	
}

void incLineNumber()
{
	++currentLineNumber;
#if qCvsDebug
	if (yy_flex_debug)
		fprintf(stderr,"LINE--> %d\n", currentLineNumber);
#endif
}
